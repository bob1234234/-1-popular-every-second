local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "+1 Popular Every Second",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Teleport & Popularity",
    ConfigurationSaving = {
        Enabled = false,
    },
    Discord = {
        Enabled = false,
    },
    KeySystem = false,
})

local MainTab = Window:CreateTab("Main", 4483362458)

-- Variables
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local teleporting = false
local teleportThread

-- Teleport position
local teleportPosition = Vector3.new(235, 36, 541)

-- Toggle teleport and walk
MainTab:CreateToggle({
    Name = "Teleport + Walk Loop",
    CurrentValue = false,
    Callback = function(Value)
        teleporting = Value

        if teleporting then
            teleportThread = task.spawn(function()
                while teleporting and hrp and hrp.Parent do
                    hrp.CFrame = CFrame.new(teleportPosition)

                    -- Walk forward
                    local walkDistance = 10
                    local steps = 10
                    for i = 1, steps do
                        if not teleporting then break end
                        hrp.CFrame = hrp.CFrame * CFrame.new(0, 0, -walkDistance / steps)
                        task.wait(0.1)
                    end

                    task.wait(1)
                end
            end)
        else
            teleporting = false
            teleportThread = nil
        end
    end,
})

-- Input to set Popularity
MainTab:CreateInput({
    Name = "Set Popularity Value",
    PlaceholderText = "Enter a number...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local popValue = leaderstats:FindFirstChild("Popularity")
            if popValue and popValue:IsA("NumberValue") then
                local number = tonumber(Value)
                if number then
                    popValue.Value = number
                else
                    warn("Invalid number entered for Popularity")
                end
            else
                warn("Popularity not found or not a NumberValue")
            end
        else
            warn("leaderstats not found")
        end
    end,
})
